Объект в JS - ассоциативный массив. Есть название поля (ключ) и его значение

Доступ к значениям полей через точку или квадратные скобки (скобки если ключ - строка или переменная)

alert( obj.prop1 );
alert( obj[prop2] );

Создание объекта 

let obj = new Object();
let obj = {
	prop1: "abc",
	prop2: 12
};

Проверить наличие свойства можно оператором in

if ("age" in user) ...

Для перебора всех свойств используется цикл for in

for (let key in object) { ... }

Объекты копируются по ссылке (как в Java, Python)

Объекты равны если это один и тот же объект

Для дублирования используется метод assign класса Object

Object.assign(dest, [src1, src2, ...])

Свойствами могут быть другие объекты

let user = {
	name: "John",
	sizes: {
		height: 100,
		width: 50
	}
};

У объектов может быть поведение (методы). Для доступа к свойствам объекта из методов используется
ключевое слово this

В стрелочных функциях в методах this берётся из методов

Для создания объектов могут использоваться функции-конструкторы

function User(name) {
	this.name = name,
	this.isAdmin = false
}
let user = new User("Igor");

то же что и 
let user = {
	this.name = name,
	this.isAdmin = false
}

В функцию-конструтор можно засунуть метод
function User() {
	this.sayHello = function() {
		alert("Hello");
	}
}

Для получения ссылки на объект в HTML можно использовать метод querySelector() объекта document

let html = document.querySelector('.elem').innerHTML

Если не найден - возвращает null

Для проверки существования свойств используется синтаксическая конструкция - опциональная цепочка

alert( user?.address?.street );

?. немедленно останавливает вычисление, если левая часть не существует


Символы

Символ - уникальный идентификатор. Создаются функцией Symbol()

let id = Symbol("id")		// "id" - описание символа

Символы гарантированно уникальны. Если у символов одинаковое описание, они всё равно будут разными

Символы могут использоваться для "скрытых свойств" и для изменения встроенного поведения ряда объектов


Преобразование типов

У примитивов есть классы-обёртки (String, Number, Boolean...). Благодаря им, мы можем вызывать методы
у примитивных типов (точне создаётся объект-обёртка, и у него вызывается метод).


В JS любой текст - строка, не существует отдельных символов.


Работа со строками:
length - длина строки (свойство)
[n], charAt(n) - вернуть строку с n-ым символов (отчёт с 0). [] вернёт undefined, charAt() - '', если символа нет
toUpperCase() - вернёт строку с заглавными буквами
toLowerCase() - вернёт стркоу со строчными буквами
indexOf(substr, [pos]) - вернёт индекс вхождения подстроки substr, начиная с позиции pos
includes(substr, [pos]) - вернёт true, если подстрока substr встречается, начиная с позиции pos, иначе - false
startsWith(substr) - проверка, начинается ли строка с подстроки substr
endsWith(substr) - проверка, заканчивается ли строка подстрокой substr
slice(start, end) - вернуть подстроку (выбирает от start до end, не включая end)
substring(start, end) - вернуть подстроку (выбирает между start и end)
substr(start, length) - вернуть подстроку (length символов, начиная со start)


